Setup basic authentication on kubernetes
Note: This is not recommended in a production environment. This is only for learning purposes.

Follow the below instructions to configure basic authentication in a kubeadm setup.

Create a file with user details locally at /tmp/users/user-details.csv

# User File Contents
password123,user1,u0001
password123,user2,u0002
password123,user3,u0003
password123,user4,u0004
password123,user5,u0005


Edit the kube-apiserver static pod configured by kubeadm to pass in the user details. The file is located at /etc/kubernetes/manifests/kube-apiserver.yaml

1) kubectl config --kubeconfig=/root/my-kube-config use-context research
2) kubectl config use-context research --> Without defining File Path
3) kubectl config use-context test-user@development --> Without defining File Path


apiVersion: v1
kind: Pod
metadata:
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
      <content-hidden>
    image: k8s.gcr.io/kube-apiserver-amd64:v1.11.3
    name: kube-apiserver
    volumeMounts:
    - mountPath: /tmp/users
      name: usr-details
      readOnly: true
  volumes:
  - hostPath:
      path: /tmp/users
      type: DirectoryOrCreate
    name: usr-details


Modify the kube-apiserver startup options to include the basic-auth file

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  name: kube-apiserver
  namespace: kube-system
spec:
  containers:
  - command:
    - kube-apiserver
    - --authorization-mode=Node,RBAC
      <content-hidden>
    - --basic-auth-file=/tmp/users/user-details.csv


Create the necessary roles and role bindings for these users:

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: default
  name: pod-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]

---
# This role binding allows "jane" to read pods in the "default" namespace.
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: default
subjects:
- kind: User
  name: user1 # Name is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role #this must be Role or ClusterRole
  name: pod-reader # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io


Once created, you may authenticate into the kube-api server using the users credentials

curl -v -k https://localhost:6443/api/v1/pods -u "user1:password123"


Certificates

Self Generating KUbernetes Cluster
cat /etc/systemd/system/kube-apiserver.service
journalctl -u etcd.service -l

Kubeadm Cluster
cat /etc/kubernetes/manifests/kube-apiserver.yaml
kubectl logs etcd-master

Open Certificate details
openssl x509 -in /etc/kubernetes/pki/ca.crt -text -noout
openssl x509 -in /etc/kubernetes/pki/apiserver.crt -text

If Unable to see through K8s
docker ps -a
docker logs 87fc (container ID)


CERTIFICATE SIGNING REQUEST

base64 akshay.csr
cat akshay.csr | base64 | tr -d "\n"

apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: akshay
spec:
  groups:
   - system:authenticated
  usages:
   - digital signature
   - key encipherment
   - server auth
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZV3R6YUdGNU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQTBwVFNyMGIxTWtFOGtneTdnNkhMSm1qbTFsd0EzWU1YK0dOQXBlOElvT20rCjZRM0xMQVJZRjlrczBEUlVPS1JCci9NUy9ibFBOcVNwS0JSK3lzeXhBd0J1a3J0MnFwVDVCWjM4MmpZOEVTbTgKQXpSU0xjaHBSSUMrYzMwcTJMcTVnbzYvdDJHZUVWMUR0a1ZDNU1SeEZSSkxZTDhTUGJYSjRIQTg4VlY4c1plYgpvNnVldE4rbmYzYll3VGRQd25BMlRyd0REcEE4S3M1ZVdXZngyTHlSU3U3TFFsZ1JIbmNMU05XRjAwTmJmNWdnCm43WjFDMkFSc2pRVWJBSFhTYWhMQnNlVjBXUmhFOUYyc2VYVVQwVHJQMmlSYzZiTHhkM0MvMUREc3ZoMCtuTysKUWJERVJvd2ZVN2JVdmo0c3R4TEhCeFNpUGZrT09adE9kMGk1M3dYc1lRSURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBTEg0T09LMW5oRGtvekNDT0luWWxheGc1cndEK0lVdVVKaVJHSUdwSFZ2bStYNVZUVnBUCkFVQVB2RzA0REdwWU55RHRNZlA5WG1hTnMrcFdoaWJSY0ZHR1RzWEU5V280cUFOZUkwS1dKSWRDSE42bUw2dWEKblZBZktFS1ZKc2ZWSnNjYTJ5QW0wRlFxdDZIV243K1UzR3ZkeHBMWko5akMwb0xSczRQSzVtS2NKOE5OZ0JzcQp2a3NpWUM3RXh1WThOZHY3Y2pIRzQzdFFyT1ZGQjJPWnZqS0xUOHVzSGZOL1BKQ0cwSFRFU3pJTFFHNk9EZ1l2Ck1zSVBzRlY4ZlI0Q21TcUN0dE1hclFHd0RYT0N6TmI0MkJRMjVCalkwcHpyRFQvSkZMdG9KN2ZHdTJOdGVTWWQKZ0JOM3BvV1FoaG1CZk4wdWR3MDVUbFJrY3B0MVBCemRvTlU9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=

KUBECONFIG ????


RBAC

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list““create“]


apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: dev-user-binding
subjects:
  - kind: User
    name: dev-user
    apiGroup: rbac.authorization.k8s.io
roleRef:
    kind: Role
    name: developer
    apiGroup: rbac.authorization.k8s.io


#Grant the dev-user permissions to create deployments in the blue namespace.
#Remember to add both groups "apps" and "extensions"

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  creationTimestamp: "2021-02-14T23:31:24Z"
  name: developer
  namespace: blue
  resourceVersion: "3764"
  selfLink: /apis/rbac.authorization.k8s.io/v1/namespaces/blue/roles/developer
  uid: 7b8a85f2-bb00-4c3d-b0a0-9503be39d7ed
rules:
- apiGroups:
  - ""
  resourceNames:
  - dark-blue-app
  resources:
  - pods
  verbs:
  - get
  - watch
  - create
  - delete

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: blue
  name: deploy-role
rules:
- apiGroups: ["apps", "extensions"]
  resources: ["deployments"]
  verbs: ["create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: dev-user-deploy-binding
  namespace: blue
subjects:
- kind: User
  name: dev-user
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: deploy-role
  apiGroup: rbac.authorization.k8s.io


  kubectl describe role kube-proxy -n kube-system


CLUSTER ROLES

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: michelle-role
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list"]


apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: michelle-role-binding
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: michelle-role
  apiGroup: rbac.authorization.k8s.io


Check answer at /var/answers.
Test the access using the command kubectl auth can-i list nodes --as michelle
kubectl get pods --as dev-user
kubectl auth can-i get pods --as dev-user

controlplane $ more /var/answers/michelle-node-admin.yaml
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-admin
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "watch", "list", "create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: michelle-binding
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: node-admin
  apiGroup: rbac.authorization.k8s.io

controlplane $ more /var/answers/michelle-storage-admin.yaml
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: storage-admin
rules:
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "watch", "list", "create", "delete"]
- apiGroups: ["storage.k8s.io"] --------------->  kubectl api-resources
  resources: ["storageclasses"]
  verbs: ["get", "watch", "list", "create", "delete"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: michelle-storage-admin
subjects:
- kind: User
  name: michelle
  apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: storage-admin
  apiGroup: rbac.authorization.k8s.io


SECRET

kubectl create secret docker-registry private-reg-cred \
  --docker-username=dock_user \
  --docker-password=dock_password \
  --docker-server=myprivateregistry.com:5000 \
  --docker-email=dock_user@myprivateregistry.com

spec:
  containers:
    - name: foo
      image: janedoe/awesomeapp:v1
  imagePullSecrets:
    - name: myregistrykey



SECURITY CONTEXT

apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  securityContext:
    runAsUser: 1010
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper


kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'
kubectl exec -it ubuntu-sleeper -- whoami

controlplane $ more /var/answers/answer-6.yaml
apiVersion: v1
kind: Pod
metadata:
  name: ubuntu-sleeper
  namespace: default
spec:
  containers:
  - command:
    - sleep
    - "4800"
    image: ubuntu
    name: ubuntu-sleeper
    securityContext:
      capabilities:
        add: ["SYS_TIME"]

kubectl exec -it ubuntu-sleeper -- date -s '19 APR 2012 11:14:00'

NETWORK POLICY


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
spec:
  podSelector: :
    matchLabels:
      role: db
  policyTypes:
  - Ingress

  ingress:
  - from:
     - podSelector:
           matchLabels:
             name: api-pod
     ports:
     - protocol: TCP
       port: 3306


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
spec:
  podSelector: :
    matchLabels:
      role: db
  policyTypes:
  - Ingress

  ingress:
  - from:
     - podSelector:
           matchLabels:
             name: api-pod
	   namespaceSelector:
			matchLabels:
			  name: prod
     ports:
     - protocol: TCP
       port: 3306


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
spec:
  podSelector: :
    matchLabels:
      role: db
  policyTypes:
  - Ingress

  ingress:
  - from:
     - podSelector:
           matchLabels:
             name: api-pod
	   namespaceSelector:
			matchLabels:
			  name: prod
	 - ipBlock:
			cidr: 192.168.5.10/32
     ports:
     - protocol: TCP
       port: 3306



apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
spec:
  podSelector: :
    matchLabels:
      role: db
  policyTypes:
  - Ingress

  ingress:
  - from:
     - podSelector:
           matchLabels:
             name: api-pod
	 - namespaceSelector:      --------------- adding "-" will be accepted as an independent rule
			matchLabels:
			  name: prod
	 - ipBlock:
			cidr: 192.168.5.10/32
     ports:
     - protocol: TCP
       port: 3306


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
spec:
  podSelector: :
    matchLabels:
      role: db
  policyTypes:
  - Egress

  egress:
  - to:
      - ipBlock:
           cidr: 192.168.5.10/32
      ports:
	  - protocl: TCP
        port: 80


  controlplane $ cat /var/answers/answer-internal-policy.yaml
  apiVersion: networking.k8s.io/v1
  kind: NetworkPolicy
  metadata:
    name: internal-policy
    namespace: default
  spec:
    podSelector:
      matchLabels:
        name: internal
    policyTypes:
      - Egress
      - Ingress
    ingress:
      - { }
    egress:
      - to:
          - podSelector:
              matchLabels:
                name: mysql
        ports:
          - protocol: TCP
            port: 3306

      - to:
          - podSelector:
              matchLabels:
                name: payroll
        ports:
          - protocol: TCP
            port: 8080

      - ports:
          - port: 53
            protocol: UDP
          - port: 53
            protocol: TCP

  kubectl get pod -l name=payroll --> list pod with payroll label

